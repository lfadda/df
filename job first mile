--------------------------------------------------
-----------------   COLECTA XD   -----------------
--------------------------------------------------

--------------------------------------------------

CREATE SET VOLATILE TABLE DUPLICADAS AS (

SELECT
    A1.SHP_COMPANY_ID,
    A1.SIT_SITE_ID,
    A1.SHP_LG_SUB_DETAIL_ID,
    COUNT(*) AS Q_DUPLICADO

FROM WHOWNER.BT_SHP_LG_PRE_INVOICE_ROUTES A1 
    INNER JOIN WHOWNER.BT_SHP_LG_PRE_INVOICE_DETAIL A2 ON A1.SHP_LG_PRE_INVOICE_DETAIL_ID = A2.SHP_LG_PRE_INVOICE_DETAIL_ID
    INNER JOIN WHOWNER.BT_SHP_LG_PRE_INVOICE_HEADER A3 ON A2.SHP_LG_PRE_INVOICE_HEADER_PRE_INVOICE_ID = A3.SHP_LG_PRE_INVOICE_HEADER_PRE_INVOICE_ID 
        AND A3.SHP_LG_PRODUCT_TYPE = 'LOGISTICS' -- INCLUSÃO THIAGO 2021-12-03

WHERE 1=1
    AND A3.SHP_LG_PRODUCT_TYPE = 'logistics' -- INCLUSÃO THIAGO 2021-12-03
    AND A1.SHP_LG_STEP_TYPE='first_mile'
    AND A1.SIT_SITE_ID IN ('MLC','MLM','MCO','MLB','MLA')
    AND CAST(A2.SHP_LG_PRE_INVOICE_DETAIL_DATE_CREATED AS DATE) BETWEEN CAST(ADD_MONTHS(DATE - (EXTRACT(DAY FROM DATE)-1),-6) AS DATE) AND CAST(DATE AS DATE)
    AND A2.SHP_LG_PRE_INVOICE_DETAIL_TYPE_NAME='service'
    AND A3.SHP_LG_PRE_INVOICE_HEADER_STATUS_NAME <> 'canceled'

GROUP BY 1,2,3

) WITH DATA UNIQUE PRIMARY INDEX (SHP_COMPANY_ID,SIT_SITE_ID,SHP_LG_SUB_DETAIL_ID) ON COMMIT PRESERVE ROWS;

--------------------------------------------------

CREATE SET VOLATILE TABLE PRE AS (

SELECT
    CAST(ZEROIFNULL(SHP_LG_ROUTE_ID) AS DECIMAL (38,0)) AS SHP_LG_ROUTE_ID,
    A1.SIT_SITE_ID,
    A1.SHP_COMPANY_ID,
    A1.SHP_LG_PRE_INVOICE_HEADER_PERIOD_NAME,
    COUNT(A1.SHP_LG_SUB_DETAIL_ID) AS Q_REP,
    SUM(
      CASE 
        WHEN A2.SHP_LG_PRE_INVOICE_DETAIL_SUB_TYPE = 'packages:fixed' 
        THEN (ZEROIFNULL(A2.SHP_LG_PRE_INVOICE_DETAIL_COST)*ZEROIFNULL(A1.SHP_LG_ROUTE_AMOUNT_SHIPMENTS)) 
        ELSE (A2.SHP_LG_PRE_INVOICE_DETAIL_COST) 
      END) AS COSTO,
    SUM(
      CASE 
        WHEN A3.SHP_COMPANY_ID IS NULL 
        THEN (
          CASE 
            WHEN A2.SHP_LG_PRE_INVOICE_DETAIL_SUB_TYPE = 'packages:fixed' 
            THEN (ZEROIFNULL(A2.SHP_LG_PRE_INVOICE_DETAIL_COST)*ZEROIFNULL(A1.SHP_LG_ROUTE_AMOUNT_SHIPMENTS)) 
            ELSE (A2.SHP_LG_PRE_INVOICE_DETAIL_COST) 
          END)
        ELSE (
          CASE 
            WHEN A2.SHP_LG_PRE_INVOICE_DETAIL_SUB_TYPE = 'packages:fixed' 
            THEN (ZEROIFNULL(A2.SHP_LG_PRE_INVOICE_DETAIL_COST)*ZEROIFNULL(A1.SHP_LG_ROUTE_AMOUNT_SHIPMENTS)) 
            ELSE (A2.SHP_LG_PRE_INVOICE_DETAIL_COST) 
          END)/CAST(ZEROIFNULL(A3.Q_DUPLICADO) AS DECIMAL(19,0)) 
      END
    ) AS Q_COSTO,
    SUM(A1.SHP_LG_ROUTE_AMOUNT_SHIPMENTS) AS Q_SHP,
    CAST(SUM(
      CASE 
        WHEN A2.SHP_LG_PRE_INVOICE_DETAIL_SUB_TYPE = 'packages:fixed' 
        THEN (ZEROIFNULL(A2.SHP_LG_PRE_INVOICE_DETAIL_COST)*ZEROIFNULL(A1.SHP_LG_ROUTE_AMOUNT_SHIPMENTS)) 
        ELSE (A2.SHP_LG_PRE_INVOICE_DETAIL_COST) 
      END) / SUM(A1.SHP_LG_ROUTE_AMOUNT_SHIPMENTS) 
    AS DECIMAL (19,2)) AS AVG_COST_BILLING

FROM WHOWNER.BT_SHP_LG_PRE_INVOICE_ROUTES A1 
    INNER JOIN WHOWNER.BT_SHP_LG_PRE_INVOICE_DETAIL A2 ON A1.SHP_LG_PRE_INVOICE_DETAIL_ID = A2.SHP_LG_PRE_INVOICE_DETAIL_ID
    INNER JOIN WHOWNER.BT_SHP_LG_PRE_INVOICE_HEADER HEADER ON A2.SHP_LG_PRE_INVOICE_HEADER_PRE_INVOICE_ID = HEADER.SHP_LG_PRE_INVOICE_HEADER_PRE_INVOICE_ID 
        AND HEADER.SHP_LG_PRODUCT_TYPE = 'logistics' -- INCLUSÃO THIAGO 2021-12-03
    LEFT JOIN DUPLICADAS A3 ON A1.SHP_COMPANY_ID=A3.SHP_COMPANY_ID
        AND A1.SIT_SITE_ID=A3.SIT_SITE_ID
        AND A1.SHP_LG_SUB_DETAIL_ID=A3.SHP_LG_SUB_DETAIL_ID

WHERE 1=1
    AND HEADER.SHP_LG_PRODUCT_TYPE = 'logistics' -- INCLUSÃO THIAGO 2021-12-03
    AND A1.SHP_LG_STEP_TYPE='first_mile'
    AND A1.SIT_SITE_ID IN ('MLC','MLM','MCO','MLB','MLA')
    AND CAST(A2.SHP_LG_PRE_INVOICE_DETAIL_DATE_CREATED AS DATE) BETWEEN CAST(ADD_MONTHS(DATE - (EXTRACT(DAY FROM DATE)-1),-6) AS DATE) AND CAST(DATE AS DATE)
    AND A2.SHP_LG_PRE_INVOICE_DETAIL_TYPE_NAME='service'
    AND HEADER.SHP_LG_PRE_INVOICE_HEADER_STATUS_NAME <> 'canceled'

GROUP BY 1,2,3,4

) WITH DATA UNIQUE PRIMARY INDEX (SHP_LG_ROUTE_ID,SIT_SITE_ID,SHP_LG_PRE_INVOICE_HEADER_PERIOD_NAME) ON COMMIT PRESERVE ROWS;

--------------------------------------------------

CREATE SET VOLATILE TABLE PRE_2_A AS (

SELECT
    C.SHP_CO_SITE_ID SIT_SITE_ID,
    CAST(ZEROIFNULL(A.SHP_LG_ROUTE_ID) AS DECIMAL (38,0)) SHP_LG_ROUTE_ID,
    A.SHP_LG_PRE_INVOICE_HEADER_PERIOD_NAME AS SHP_LG_PERIOD,
    1 AS STATUS_FLAG,
    OTU.SHP_LG_TRANSPORT_UNIT_STATUS AS STATUS,
    CAST(ZEROIFNULL(R.SHP_LG_TR_RELATED_ENTITY_ID) AS DECIMAL (38,0)) AS SHP_SHIPMENT_ID

FROM WHOWNER.LK_SHP_LG_ROUTES ROU
    INNER JOIN WHOWNER.LK_SHP_COMPANIES AS C ON C.SHP_COMPANY_ID = ROU.SHP_COMPANY_ID
    INNER JOIN  WHOWNER.LK_SHP_LG_ROUTE_STOP AS RS  ON ROU.SHP_LG_ROUTE_ID  = RS.SHP_LG_ROUTE_ID
    INNER JOIN  WHOWNER.BT_SHP_LG_ORDER AS O ON O.SHP_LG_ROUTE_STOP_ID  = RS.SHP_LG_STOP_ID
    INNER JOIN  WHOWNER.LK_SHP_LG_ORDER_TU AS OTU  ON OTU.SHP_LG_ORDER_ID  = O.SHP_LG_ORDER_ID
    INNER JOIN WHOWNER.BT_SHP_LG_PRE_INVOICE_ROUTES AS A ON ROU.SHP_LG_ROUTE_ID = A.SHP_LG_PRE_INVOICE_ENTITY_ID -- SHP_LG_ROUTE_ID
        AND ROU.SHP_COMPANY_ID = A.SHP_COMPANY_ID
    INNER JOIN WHOWNER.BT_SHP_LG_PRE_INVOICE_DETAIL Y ON A.SHP_LG_PRE_INVOICE_DETAIL_ID = Y.SHP_LG_PRE_INVOICE_DETAIL_ID
    INNER JOIN WHOWNER.BT_SHP_LG_PRE_INVOICE_HEADER Z ON Y.SHP_LG_PRE_INVOICE_HEADER_PRE_INVOICE_ID = Z.SHP_LG_PRE_INVOICE_HEADER_PRE_INVOICE_ID
        AND Z.SHP_LG_PRE_INVOICE_HEADER_STATUS_NAME <> 'canceled'  
    LEFT JOIN WHOWNER.LK_SHP_LG_TRANSPORT_UNIT AS R ON OTU.SHP_LG_TRANSPORT_UNIT_ID = R.SHP_LG_TRANSPORT_UNIT_ID

WHERE 1=1
    AND CAST(SUBSTRING(A.SHP_LG_PRE_INVOICE_HEADER_PERIOD_NAME,1,6) AS INTEGER) >= CAST(EXTRACT( YEAR FROM DATE - 180) || trim(extract(month from date - 180) (format '99')) AS INTEGER) -- APENAS ULTIMOS SEIS MESES
    AND A.SHP_LG_STEP_TYPE = 'first_mile'
    AND ROU.SHP_LG_TYPE = 'first_mile'
    AND OTU.SHP_LG_TRANSPORT_UNIT_STATUS = 'picked_up'
    AND ROU.SHP_LG_ROUTE_STATUS = 'close'
    AND A.SIT_SITE_ID IN ('MLC','MLM','MCO','MLB','MLA')

) WITH DATA PRIMARY INDEX (SHP_SHIPMENT_ID) ON COMMIT PRESERVE ROWS;

--------------------------------------------------

CREATE SET VOLATILE TABLE PRE_2_B AS (

SELECT
    C.SHP_CO_SITE_ID SIT_SITE_ID,
    CAST(ZEROIFNULL(A.SHP_LG_ROUTE_ID) AS DECIMAL (38,0)) SHP_LG_ROUTE_ID,
    A.SHP_LG_PRE_INVOICE_HEADER_PERIOD_NAME AS SHP_LG_PERIOD,
    0 AS STATUS_FLAG,
    OTU.SHP_LG_TRANSPORT_UNIT_STATUS AS STATUS,
    CAST(ZEROIFNULL(R.SHP_LG_TR_RELATED_ENTITY_ID) AS DECIMAL (38,0)) AS SHP_SHIPMENT_ID

FROM WHOWNER.LK_SHP_LG_ROUTES ROU
    INNER JOIN WHOWNER.LK_SHP_COMPANIES AS C ON C.SHP_COMPANY_ID = ROU.SHP_COMPANY_ID
    INNER JOIN  WHOWNER.LK_SHP_LG_ROUTE_STOP AS RS  ON ROU.SHP_LG_ROUTE_ID  = RS.SHP_LG_ROUTE_ID
    INNER JOIN  WHOWNER.BT_SHP_LG_ORDER AS O ON O.SHP_LG_ROUTE_STOP_ID  = RS.SHP_LG_STOP_ID
    INNER JOIN  WHOWNER.LK_SHP_LG_ORDER_TU AS OTU  ON OTU.SHP_LG_ORDER_ID  = O.SHP_LG_ORDER_ID
    INNER JOIN WHOWNER.BT_SHP_LG_PRE_INVOICE_ROUTES AS A ON ROU.SHP_LG_ROUTE_ID = A.SHP_LG_PRE_INVOICE_ENTITY_ID -- SHP_LG_ROUTE_ID
        AND ROU.SHP_COMPANY_ID = A.SHP_COMPANY_ID
    INNER JOIN WHOWNER.BT_SHP_LG_PRE_INVOICE_DETAIL Y ON A.SHP_LG_PRE_INVOICE_DETAIL_ID = Y.SHP_LG_PRE_INVOICE_DETAIL_ID
    INNER JOIN WHOWNER.BT_SHP_LG_PRE_INVOICE_HEADER HE ON Y.SHP_LG_PRE_INVOICE_HEADER_PRE_INVOICE_ID = HE.SHP_LG_PRE_INVOICE_HEADER_PRE_INVOICE_ID
        AND HE.SHP_LG_PRE_INVOICE_HEADER_STATUS_NAME <> 'canceled' 
        
    LEFT JOIN WHOWNER.LK_SHP_LG_TRANSPORT_UNIT AS R ON OTU.SHP_LG_TRANSPORT_UNIT_ID = R.SHP_LG_TRANSPORT_UNIT_ID
    INNER JOIN WHOWNER.LK_SHP_CDG_SHIPPING_COST AS Z ON Z.SHP_SHIPMENT_ID = CAST(ZEROIFNULL(R.SHP_LG_TR_RELATED_ENTITY_ID) AS DECIMAL (38,0))

WHERE 1=1
    AND A.SHP_LG_STEP_TYPE = 'first_mile'
    AND ROU.SHP_LG_TYPE = 'first_mile'
    AND A.SIT_SITE_ID IN ('MLC','MLM','MCO','MLB','MLA')

) WITH DATA PRIMARY INDEX (SHP_SHIPMENT_ID) ON COMMIT PRESERVE ROWS;
        
--------------------------------------------------

CREATE SET VOLATILE TABLE PRE_2_C AS (

SELECT * FROM PRE_2_A
UNION ALL 
SELECT * FROM PRE_2_B

) WITH DATA  PRIMARY INDEX (SHP_SHIPMENT_ID) ON COMMIT PRESERVE ROWS;

--------------------------------------------------

CREATE SET VOLATILE TABLE PRE_2 AS (

SELECT * FROM PRE_2_C

QUALIFY ROW_NUMBER() OVER(PARTITION BY SHP_SHIPMENT_ID ORDER BY STATUS_FLAG DESC) = 1

) WITH DATA UNIQUE  PRIMARY INDEX (SHP_SHIPMENT_ID) ON COMMIT PRESERVE ROWS;

--------------------------------------------------

CREATE SET VOLATILE TABLE PRE_2A AS (

SELECT
    SHP_LG_ROUTE_ID,
    SIT_SITE_ID,
    COUNT(DISTINCT SHP_SHIPMENT_ID) AS Q_SHP

FROM PRE_2

GROUP BY 1,2

) WITH DATA UNIQUE PRIMARY INDEX (SHP_LG_ROUTE_ID,SIT_SITE_ID) ON COMMIT PRESERVE ROWS;

--------------------------------------------------

CREATE SET VOLATILE TABLE PRE_2B AS (

SELECT
    A1.*,
    A2.Q_SHP AS Q_SHP_BI,
    CAST(A1.Q_COSTO * 1.0000 / A2.Q_SHP AS DECIMAL(19,2)) AS AVG_COST_NEW

FROM PRE A1
    INNER JOIN PRE_2A A2 ON A1.SHP_LG_ROUTE_ID = A2.SHP_LG_ROUTE_ID 
        AND A1.SIT_SITE_ID = A2.SIT_SITE_ID

) WITH DATA UNIQUE PRIMARY INDEX (SHP_LG_ROUTE_ID,SIT_SITE_ID) ON COMMIT PRESERVE ROWS;

--------------------------------------------------

CREATE SET VOLATILE TABLE PRE_3 AS (

SELECT
    A1.SHP_SHIPMENT_ID,
    A1.SIT_SITE_ID,
    A2.SHP_LG_ROUTE_ID,
    A2.SHP_LG_PERIOD,
    A1.SHP_MONTH_HANDLING,
    A1.SHP_PICKING_TYPE_ID_AGG,
    A2.STATUS AS STATUS,
    A3.AVG_COST_NEW

FROM WHOWNER.LK_SHP_CDG_SHIPPING_COST A1
    INNER JOIN PRE_2 A2 ON A1.SHP_SHIPMENT_ID=A2.SHP_SHIPMENT_ID
    INNER JOIN PRE_2B A3 ON A2.SHP_LG_ROUTE_ID=A3.SHP_LG_ROUTE_ID 
        AND A1.SIT_SITE_ID = A2.SIT_SITE_ID

WHERE 1=1
    AND A1.SIT_SITE_ID IN ('MLC','MLM','MCO','MLB','MLA')
    AND A1.SHP_PICKING_TYPE_ID_AGG='XD'

) WITH DATA PRIMARY INDEX (SHP_SHIPMENT_ID) ON COMMIT PRESERVE ROWS;

--------------------------------------------------

CALL CDG_STG.PR_DROP_TABLE('STG_CDG_CPS_FIRST_MILE');

--------------------------------------------------

CREATE MULTISET TABLE CDG_STG.STG_CDG_CPS_FIRST_MILE AS (

SELECT
    A1.SHP_SHIPMENT_ID,
    A1.SHP_LG_ROUTE_ID,
    A1.SHP_LG_PERIOD,
    A1.STATUS,
    A1.SIT_SITE_ID,
    A1.SHP_MONTH_HANDLING,
    SUM(A1.AVG_COST_NEW) AS AVG_COST -- CPS cost per shipment

FROM PRE_3 A1

GROUP BY 1,2,3,4,5,6

) WITH DATA UNIQUE PRIMARY INDEX(SHP_SHIPMENT_ID);

---------------------------------------------------
------       COMPLEMENTARIAS                -------
---------------------------------------------------

CREATE SET VOLATILE TABLE COMPLEMENTARIAS AS (

SELECT
    A1.SHP_LG_PRE_INVOICE_HEADER_PERIOD_NAME,
    A1.SIT_SITE_ID,
    MAX(CAST(SHP_LG_PRE_INVOICE_DETAIL_LAST_UPDATED AS DATE)) AS MAX_DATE,
    SUM((
        CASE 
            WHEN SHP_LG_PRE_INVOICE_DETAIL_TYPE_NAME = 'additional' 
            THEN ZEROIFNULL(A1.SHP_LG_PRE_INVOICE_DETAIL_TOTAL_COST) 
            ELSE 0 
        END)) AS ADDITIONAL,
    SUM((
        CASE 
            WHEN SHP_LG_PRE_INVOICE_DETAIL_TYPE_NAME = 'complementary' 
            THEN ZEROIFNULL(A1.SHP_LG_PRE_INVOICE_DETAIL_TOTAL_COST) 
            ELSE 0 
        END)) AS COMPLEMENTARY,
    SUM((
        CASE 
            WHEN SHP_LG_PRE_INVOICE_DETAIL_TYPE_NAME = 'complementary_discount' 
                THEN ZEROIFNULL(A1.SHP_LG_PRE_INVOICE_DETAIL_TOTAL_COST) 
                ELSE 0 
        END)) AS COMPLEMENTARY_DISCOUNT,
    SUM((
        CASE 
            WHEN SHP_LG_PRE_INVOICE_DETAIL_TYPE_NAME = 'penalty' 
            THEN ZEROIFNULL(A1.SHP_LG_PRE_INVOICE_DETAIL_TOTAL_COST) 
            ELSE 0 
        END)) AS PENALTY,
    ZEROIFNULL(ADDITIONAL) + ZEROIFNULL(COMPLEMENTARY) - ZEROIFNULL(COMPLEMENTARY_DISCOUNT) - ZEROIFNULL(PENALTY)  AS TOTALES_COMPLEMENTARIAS

FROM  BT_SHP_LG_PRE_INVOICE_DETAIL A1 
    LEFT JOIN BT_SHP_LG_PRE_INVOICE_HEADER A2 ON A1.SHP_LG_PRE_INVOICE_HEADER_PRE_INVOICE_ID = A2.SHP_LG_PRE_INVOICE_HEADER_PRE_INVOICE_ID

WHERE 1=1
    AND A1.SHP_LG_PRE_INVOICE_DETAIL_TYPE_NAME IN ('additional','complementary_discount','penalty','complementary')
    AND A2.SHP_LG_PRE_INVOICE_HEADER_STEP_TYPE='first_mile'
    AND A2.SHP_LG_PRODUCT_TYPE = 'logistics' -- INCLUSÃO THIAGO 2021-12-03
    AND A2.SHP_LG_PRE_INVOICE_HEADER_STATUS_NAME NOT IN  ('canceled','pending')

GROUP BY 1,2

) WITH DATA UNIQUE PRIMARY INDEX (SHP_LG_PRE_INVOICE_HEADER_PERIOD_NAME,SIT_SITE_ID) ON COMMIT PRESERVE ROWS;

--------------------------------------------------

CREATE SET VOLATILE TABLE Q_SHP AS (

SELECT
    A1.SHP_LG_PERIOD, -- AAAAMMQX
    A1.SIT_SITE_ID,
    COUNT(A1.SHP_SHIPMENT_ID) AS Q_SHP

FROM CDG_STG.STG_CDG_CPS_FIRST_MILE A1

GROUP BY 1,2

) WITH DATA UNIQUE PRIMARY INDEX (SHP_LG_PERIOD,SIT_SITE_ID) ON COMMIT PRESERVE ROWS;

--------------------------------------------------

CREATE SET VOLATILE TABLE COMPLEMENTARIAS_SHP AS (

SELECT
    SUBSTRING(A1.SHP_LG_PERIOD,1,6) AS YEAR_MONTH,
    SHP_LG_PERIOD,
    A1.SIT_SITE_ID,
    A1.Q_SHP,
    A2.MAX_DATE,
    A2.TOTALES_COMPLEMENTARIAS AS COMPLEMENTARIAS,
    ZEROIFNULL(A2.TOTALES_COMPLEMENTARIAS) * 1.0000000 / Q_SHP AS COMPLENTARIAS_SHP

FROM Q_SHP A1
    LEFT JOIN COMPLEMENTARIAS A2 ON A1.SHP_LG_PERIOD = A2.SHP_LG_PRE_INVOICE_HEADER_PERIOD_NAME 
        AND A1.SIT_SITE_ID=A2.SIT_SITE_ID

) WITH DATA PRIMARY INDEX (SHP_LG_PERIOD,SIT_SITE_ID) ON COMMIT PRESERVE ROWS;

--------------------------------------------------

CREATE SET VOLATILE TABLE RELACION_PERIODO_ESTIMACAO AS (

WITH TEMP_RELACION_DE_PERIODOS AS (
    
    SELECT 
        A.SIT_SITE_ID, 
        A.SHP_LG_PRE_INVOICE_HEADER_PERIOD_NAME AS PERIOD,
        CASE
            WHEN COUNT(B.SHP_LG_PRE_INVOICE_HEADER_PRE_INVOICE_ID) = 0 
            THEN 1 
            ELSE 0 
        END AS FLAG_ESTIMACION
        
    FROM WHOWNER.BT_SHP_LG_PRE_INVOICE_HEADER A
        LEFT JOIN WHOWNER.BT_SHP_LG_PRE_INVOICE_HEADER B
            ON A.SHP_LG_PRE_INVOICE_HEADER_PRE_INVOICE_ID = B.SHP_LG_PRE_INVOICE_HEADER_PRE_INVOICE_ID
            AND B.SHP_LG_PRE_INVOICE_HEADER_STEP_TYPE = 'first_mile'
            AND B.SHP_LG_PRE_INVOICE_HEADER_TYPE = 'complementary'
            AND B.SHP_LG_PRE_INVOICE_HEADER_STATUS_NAME NOT IN  ('canceled','pending')
        
    WHERE A.SHP_LG_PRODUCT_TYPE = 'logistics'
        AND CAST(SUBSTRING(A.SHP_LG_PRE_INVOICE_HEADER_PERIOD_NAME,1,4) AS INTEGER) >= 2022
        AND A.SHP_LG_PRE_INVOICE_HEADER_STATUS_NAME NOT IN  ('canceled','pending')
    
    GROUP BY 1,2

), 
TEMP_PERIODO_USADO_PARA_ESTIMACION AS (

    SELECT 
        SIT_SITE_ID,
        MAX(PERIOD) PERIODO_DE_ESTIMACION
    
    FROM TEMP_RELACION_DE_PERIODOS 
    
    WHERE FLAG_ESTIMACION = 0
    
    GROUP BY 1
)

SELECT
    A.SIT_SITE_ID, 
    A.PERIOD,
    A.FLAG_ESTIMACION,
    CASE
        WHEN A.FLAG_ESTIMACION = 1
        THEN B.PERIODO_DE_ESTIMACION
        ELSE NULL
    END AS PERIODO_DE_ESTIMACION

FROM TEMP_RELACION_DE_PERIODOS A 
    JOIN TEMP_PERIODO_USADO_PARA_ESTIMACION B
        ON A.SIT_SITE_ID = B.SIT_SITE_ID

) WITH DATA UNIQUE PRIMARY INDEX (SIT_SITE_ID,PERIOD) ON COMMIT PRESERVE ROWS
;

--------------------------------------------------
-- ALOCAÇÃO DE PICKING TYPE PARA BRASIL

CREATE SET VOLATILE TABLE TEMP_SUMMARY_MLB_FM_ALOCACION_PICKING_TYPE AS (

SELECT 
    PERIOD,
    CROSSDOCKING_AMOUNT,
    FULLFILMENT_AMOUNT,
    TOTAL_AMOUNT,
    --ALLOCATION_FULLFILMENT,
    ALLOCATION_CROSSDOCKING,
    COALESCE(ALLOCATION_CROSSDOCKING,LAST_VALUE(ALLOCATION_CROSSDOCKING IGNORE NULLS) OVER (ORDER BY PERIOD)) AS ALLOCATION_CROSSDOCKING_LAST_VALUE,
    LAST_VALUE(ALLOCATION_CROSSDOCKING IGNORE NULLS) OVER (ORDER BY PERIOD ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) AS PREVIEW_VALUE


FROM CDG_STG.SUMMARY_MLB_FM_ALOCACION_PICKING_TYPE

) WITH DATA UNIQUE PRIMARY INDEX (PERIOD) ON COMMIT PRESERVE ROWS;

--------------------------------------------------
-- AJUSTE DE VALOR DE COMPLEMENTAR POR PICKING TYPE

CREATE SET VOLATILE TABLE COMPLEMENTARIAS_COMP_PERIODO AS (

SELECT
    A1.SHP_LG_PERIOD,
    A1.SIT_SITE_ID,
    C.FLAG_ESTIMACION AS FLAG_ESTIMACION_COMPLEMENTARIAS,
    C.PERIODO_DE_ESTIMACION,
    CASE 
        WHEN A1.SIT_SITE_ID = 'MLB' AND C.FLAG_ESTIMACION = 1
        THEN SUM(D.COMPLEMENTARIAS  * ALLOCATION_CROSSDOCKING_LAST_VALUE) / SUM(D.Q_SHP) 
        WHEN A1.SIT_SITE_ID = 'MLB'
        THEN SUM(A1.COMPLEMENTARIAS * ALLOCATION_CROSSDOCKING_LAST_VALUE) / SUM(A1.Q_SHP) 
        WHEN A1.SIT_SITE_ID <> 'MLB' AND C.FLAG_ESTIMACION = 1
        THEN SUM(D.COMPLEMENTARIAS)  / SUM(D.Q_SHP)
        ELSE SUM(A1.COMPLEMENTARIAS) / SUM(A1.Q_SHP)
    END AS COMPLEMENTARIAS_PERIODO

FROM COMPLEMENTARIAS_SHP A1
    LEFT JOIN TEMP_SUMMARY_MLB_FM_ALOCACION_PICKING_TYPE B
        ON A1.SIT_SITE_ID = 'MLB'
        AND A1.SHP_LG_PERIOD = B.PERIOD
    LEFT JOIN RELACION_PERIODO_ESTIMACAO C 
        ON A1.SIT_SITE_ID = C.SIT_SITE_ID
        AND A1.SHP_LG_PERIOD = C.PERIOD
    LEFT JOIN COMPLEMENTARIAS_SHP D--ESTIMACION
        ON D.SIT_SITE_ID = C.SIT_SITE_ID
        AND D.SHP_LG_PERIOD = C.PERIODO_DE_ESTIMACION
        
GROUP BY 1,2,3,4

) WITH DATA UNIQUE PRIMARY INDEX (SHP_LG_PERIOD,SIT_SITE_ID) ON COMMIT PRESERVE ROWS;

--------------------------------------------------

CALL CDG_STG.PR_DROP_TABLE('STG_CDG_CPS_FIRST_MILE_COMPLEMENTARY');

--------------------------------------------------
-- TABLA FINAL CON CPS COMPLEMENTARIAS + PENALTY 

CREATE MULTISET TABLE CDG_STG.STG_CDG_CPS_FIRST_MILE_COMPLEMENTARY AS (

SELECT
    A1.SHP_LG_PERIOD,
    A1.SIT_SITE_ID,
    A1.FLAG_ESTIMACION_COMPLEMENTARIAS,
    A1.COMPLEMENTARIAS_PERIODO

FROM COMPLEMENTARIAS_COMP_PERIODO A1
    -- LEFT JOIN COMPLEMENTARIAS_COMP_PERIODO A2 ON A1.PERIODO_DE_ESTIMACION = A2.SHP_LG_PERIOD 
    --     AND A1.SIT_SITE_ID = A2.SIT_SITE_ID

) WITH DATA UNIQUE PRIMARY INDEX(SHP_LG_PERIOD,SIT_SITE_ID);

/*
------------------------------------------------
------- TABLA FINAL DEL CPS FIRST MILE ---------
------------------------------------------------
*/

CREATE SET VOLATILE TABLE FINAL AS (

-- CPS First Mile 
SELECT
    A1.SHP_SHIPMENT_ID,
    A1.SIT_SITE_ID,
    A1.SHP_MONTH_HANDLING,
    SUM(ZEROIFNULL(A1.AVG_COST) + ZEROIFNULL(COALESCE(A3.CPS_COMPLEMENTARIA,COMPLEMENTARIAS_PERIODO,0))) AS AVG_COST

FROM CDG_STG.STG_CDG_CPS_FIRST_MILE A1 
    LEFT JOIN CDG_STG.STG_CDG_CPS_FIRST_MILE_COMPLEMENTARY A2 
        -- ON SUBSTRING(A1.SHP_LG_PERIOD,1,6) = A2.SHP_LG_PERIOD
        ON A1.SHP_LG_PERIOD = A2.SHP_LG_PERIOD
        AND A1.SIT_SITE_ID=A2.SIT_SITE_ID 
        
    LEFT JOIN CDG_STG.COMPLEMENTARIAS_FM_LM_MANUAL A3 
        ON A1.SHP_MONTH_HANDLING=A3.MONTH_HANDLING
        AND A1.SIT_SITE_ID=A3.SIT_SITE_ID
        AND A3.STEP='FM'
    
    LEFT OUTER JOIN CDG_STG.SHP_MELIONE_CPS B
        ON A1.SHP_SHIPMENT_ID = B.SHP_SHIPMENT_ID
        AND B.SHP_LG_TR_STEP_TYPE = 'first_mile'

WHERE B.SHP_SHIPMENT_ID IS NULL
    -- AND B.SHP_LG_TR_STEP_TYPE = 'first_mile'

GROUP BY 1,2,3

UNION ALL

-- CPS First Mile do MELIONE
SELECT 
    SHP_SHIPMENT_ID,
    SIT_SITE_ID,
    SHP_MONTH_HANDLING,
    CPS AS AVG_COST
    
FROM CDG_STG.SHP_MELIONE_CPS
    WHERE SHP_LG_TR_STEP_TYPE = 'first_mile'

) WITH DATA UNIQUE PRIMARY INDEX (SHP_SHIPMENT_ID) ON COMMIT PRESERVE ROWS;

-- UPDATE DE LA TABLA PROVI_LOGISTICS_FM_CDG_SHP CON CPS CALCULADO

DELETE 
FROM CDG_STG.PROVI_LOGISTICS_FM_CDG_SHP A1
WHERE A1.SHP_SHIPMENT_ID IN (SELECT SHP_SHIPMENT_ID FROM FINAL);

INSERT CDG_STG.PROVI_LOGISTICS_FM_CDG_SHP
SELECT * FROM FINAL;

-- DROP TABLE -- Dropa las tablas más pesadas del proceso para que no consuman espacio del dataset

-- CALL CDG_STG.PR_DROP_TABLE('STG_CDG_CPS_FIRST_MILE');
-- CALL CDG_STG.PR_DROP_TABLE('STG_CDG_CPS_FIRST_MILE_COMPLEMENTARY');

CALL CDG_STG.PR_DROP_TABLE('PROVI_LOGISTICS_FM_CDG_SHP_FINAL');

CREATE MULTISET TABLE CDG_STG.PROVI_LOGISTICS_FM_CDG_SHP_FINAL AS (
SELECT * FROM CDG_STG.PROVI_LOGISTICS_FM_CDG_SHP
) WITH DATA unique PRIMARY INDEX (SHP_SHIPMENT_ID);


GRANT SELECT ON CDG_STG.STG_CDG_CPS_FIRST_MILE to thbarbosa,lfadda,dloureiro,marcschneide,allarcanjo;
GRANT SELECT ON CDG_STG.STG_CDG_CPS_FIRST_MILE_COMPLEMENTARY to thbarbosa,lfadda,dloureiro,marcschneide,allarcanjo;
GRANT SELECT ON CDG_STG.PROVI_LOGISTICS_FM_CDG_SHP_FINAL to thbarbosa,lfadda,dloureiro,marcschneide,allarcanjo;
